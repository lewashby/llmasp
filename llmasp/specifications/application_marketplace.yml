preprocessing:
- _: The marketplace offers food products. Products and product preferences will be talked about.
- product_request("product").: List all the products mentioned or requested. If a product is named MUST be listed. Ignore plural, always write the product name in singular.
- product_request("product", quantity).: List all the products mentioned or requested if and only if they have a quantity associated. Ignore plural, always write the product name in singular.

database: ./specifications/db.yml

knowledge_base: | 
  % guess selection of products
  {select(P,W,Q',T) : Q' = 1..@min(Q,R), T=Q'*PP+C} <= 1 :-
    product_request(P,R),
    product_price(P,W,PP),
    warehouse(W),
    warehouse_shipping_cost(W,C),
    product_in_warehouse(P,W,Q).

  % select the correct amount of products
  :- product_request(P,R), #sum{Q,W : select(P,W,Q,_)} != R.

  % minimize total cost considering price and shipping
  :~ select(P, W, Q, T).
    [T@1]

  % minimize shipping cost
  :~ warehouse_shipping_cost(W,C),
    warehouse_free_shipping(W,T),
    select(_,W,Q,_), Q > 0,
    #sum{Q' * Price,P : select(P,W,Q',_), product_price(P,W,Price)} < T.
    [C@3, W]

  %guess selection of products for a recipe
  {select_for_recipe(R,P,W,Q',PP') : Q' = 1..@min(Q,A), PP' = PP * Q'} <= 1 :-
    product_request(P),
    recipe(R), 
    recipe_ingredient(R,P,A),
    product_in_warehouse(P,W,Q),
    product_price(P, W, PP),
    warehouse(W).

  % select the correct amount of products
  :- product_request(P),
    #sum{ Q,R,W : select_for_recipe(R,P,W,Q,_); -A,R : recipe_ingredient(R, P, A) } != 0.

  { matching_recipe(R, P) } = 1 :- product_request(P), recipe_ingredient(R,P,_).


  % healthy products
  { select_healthy_product(P, C) : product_calories(P,C), product_request(P) } <= 1.
  :~ select_healthy_product(P, C). [C@1, P]

  #show select/4.
  #show select_for_recipe/5.
  #show select_healthy_product/2.
  #show matching_recipe/2.

postprocessing:
- _: | 
    You are an assistant in an online marketplace, which is talking directly to a customer.
    Present yourself as the shop assistant.
    Your priority is to make sales, so the main goal of all responses must be to make a sale.
    When making suggestions for the customer, present him all the offers, he can buy them all. Do not make him choose one or another.
    Your answers must be customer-oriented.
    Do not mention any product that is not explicitly provided to you before.
    Do not mention any information that is not explicitly provided to you before.
    Do not make any comparison between different product prices. Note that this applies only to products of different type.
    If there is no products to offers say that the requested products are not currently available.
    Your responses must be suggestion for the customers.
    You should guide the customer for making an order, given the products requested.
    When summarizing a response for a customer, always make suggestions about products and costs if known, do not forget that costs ALWAYS include shipping.
    Always limit your responses to a maximum of 100 characters.
- select_for_recipe("recipe", "product", "warehouse", "quantity", "total").: Say to buy "quantity" of "product" for "total" including shipping costs from "warehouse" if the customer desire to make "recipe". Do not forget the quantity.
- select("product", "warehouse", "quantity", "total").: Suggest to select "quantity" of the "product" for a cost of "total" from the "warehouse". Specify that the price include the shipping costs.
- select_healthy_product("product", "calories"): Make a comment about "calories" of "product".
- matching_recipe("recipe", "product"): Suggest that "recipe" can be done with "product".